{"name":"Reactstudy","tagline":"","body":"This is a collection of simple demos of React.js.\r\n\r\nThese demos are purposely written in a simple and clear style. You will find no difficulty in following them to learn the powerful library.\r\n\r\n## Related Demos\r\n\r\n- [Webpack Demos](https://github.com/ruanyf/webpack-demos)\r\n- [Flux Demo 01](https://github.com/ruanyf/flux-for-stupid-people-demo)\r\n- [Flux Demo 02](https://github.com/ruanyf/flux-todomvc-demo)\r\n\r\n## How to use\r\n\r\nFirst copy the repo into your disk.\r\n\r\n```bash\r\n$ git clone git@github.com:ruanyf/react-demos.git\r\n```\r\n\r\nThen play with the source files under the repo's demo* directories.\r\n\r\n## HTML Template\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <script src=\"../build/react.js\"></script>\r\n    <script src=\"../build/react-dom.js\"></script>\r\n    <script src=\"../build/browser.min.js\"></script>\r\n  </head>\r\n  <body>\r\n    <div id=\"example\"></div>\r\n    <script type=\"text/babel\">\r\n\r\n      // ** Our code goes here! **\r\n\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n## Index\r\n\r\n1. [Render JSX](#demo01-render-jsx-source)\r\n1. [Use JavaScript in JSX](#demo02-use-javascript-in-jsx-source)\r\n1. [Use array in JSX](#demo03-use-array-in-jsx-source)\r\n1. [Define a component](#demo04-define-a-component-source)\r\n1. [this.props.children](#demo05-thispropschildren-source)\r\n1. [PropTypes](#demo06-proptypes-source)\r\n1. [Finding a DOM node](#demo07-finding-a-dom-node-source)\r\n1. [this.state](#demo08-thisstate-source)\r\n1. [Form](#demo09-form-source)\r\n1. [Component Lifecycle](#demo10-component-lifecycle-source)\r\n1. [Ajax](#demo11-ajax-source)\r\n1. [Display value from a Promise](#demo12-display-value-from-a-promise-source)\r\n1. [Server-side rendering](#demo13-server-side-rendering-source)\r\n\r\n---\r\n\r\n## Demo01: Render JSX ([source](https://github.com/ruanyf/react-demos/blob/master/demo01/index.html))\r\n\r\nThe template syntax in React is called [JSX](http://facebook.github.io/react/docs/displaying-data.html#jsx-syntax). It is allowed in JSX to put HTML tags directly into JavaScript codes. `ReactDOM.render()` is the method which translates JSX into HTML, and renders it into the specified DOM node.\r\n\r\n```js\r\nReactDOM.render(\r\n  <h1>Hello, world!</h1>,\r\n  document.getElementById('example')\r\n);\r\n```\r\n\r\nAttention, you have to use `<script type=\"text/babel\">` to indicate JSX codes, and include `browser.min.js`, which is a [browser version](https://babeljs.io/docs/usage/browser/) of Babel and could be get inside a [babel-core](https://www.npmjs.com/package/babel-core) npm release, to actually perform the transformation in the browser.\r\n\r\nBefore v0.14, React use `JSTransform.js` to translate `<script type=\"text/jsx\">`. It has been deprecated ([more info](https://facebook.github.io/react/blog/2015/06/12/deprecating-jstransform-and-react-tools.html)).\r\n\r\n## Demo02: Use JavaScript in JSX ([source](https://github.com/ruanyf/react-demos/blob/master/demo02/index.html))\r\n\r\nYou could also use JavaScript in JSX. It takes angle brackets (&lt;) as the beginning of HTML syntax, and curly brackets ({) as the beginning of JavaScript syntax.\r\n\r\n```js\r\nvar names = ['Alice', 'Emily', 'Kate'];\r\n\r\nReactDOM.render(\r\n  <div>\r\n  {\r\n    names.map(function (name) {\r\n      return <div>Hello, {name}!</div>\r\n    })\r\n  }\r\n  </div>,\r\n  document.getElementById('example')\r\n);\r\n```\r\n\r\n## Demo03: Use array in JSX ([source](https://github.com/ruanyf/react-demos/blob/master/demo03/index.html))\r\n\r\nIf a JavaScript variable is array, JSX will implicitly concat all members of the array.\r\n\r\n```js\r\nvar arr = [\r\n  <h1>Hello world!</h1>,\r\n  <h2>React is awesome</h2>,\r\n];\r\nReactDOM.render(\r\n  <div>{arr}</div>,\r\n  document.getElementById('example')\r\n);\r\n```\r\n\r\n## Demo04: Define a component ([source](https://github.com/ruanyf/react-demos/blob/master/demo04/index.html))\r\n\r\n`React.createClass()` creates a component class, which implements a render method to return an component instance of the class. You don't need to call `new` on the class in order to get an instance, just use it as a normal HTML tag.\r\n\r\n```js\r\nvar HelloMessage = React.createClass({\r\n  render: function() {\r\n    return <h1>Hello {this.props.name}</h1>;\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <HelloMessage name=\"John\" />,\r\n  document.getElementById('example')\r\n);\r\n```\r\n\r\nComponents can have attributes, and you can use `this.props.[attribute]` to access them, just like `this.props.name` of `<HelloMessage name=\"John\" />` is John.\r\n\r\n## Demo05: this.props.children ([source](https://github.com/ruanyf/react-demos/blob/master/demo05/index.html))\r\n\r\nReact uses `this.props.children` to access a component's children nodes.\r\n\r\n```javascript\r\nvar NotesList = React.createClass({\r\n  render: function() {\r\n    return (\r\n      <ol>\r\n      {\r\n        React.Children.map(this.props.children, function (child) {\r\n          return <li>{child}</li>;\r\n        })\r\n      }\r\n      </ol>\r\n    );\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <NotesList>\r\n    <span>hello</span>\r\n    <span>world</span>\r\n  </NotesList>,\r\n  document.body\r\n);\r\n```\r\n\r\nPlease be minded that the value of `this.props.children` has three possibilities. If the component has no children node, the value is `undefined`; If single children node, an object; If multiple children nodes, an array. You should be careful to handle it.\r\n\r\nReact gave us an utility [`React.Children`](https://facebook.github.io/react/docs/top-level-api.html#react.children) for dealing with the `this.props.children`'s opaque data structure. You could use `React.Children.map` to iterate `this.props.children` without worring its data type being `undefined` or `object`. Check [official document](https://facebook.github.io/react/docs/top-level-api.html#react.children) for more methods `React.Children` offers.\r\n\r\n## Demo06: PropTypes ([source](https://github.com/ruanyf/react-demos/blob/master/demo06/index.html))\r\n\r\nComponents have many specific attributes which are called ”props” in React and can be of any type.\r\n\r\nSometimes you need a way to validate these props. You don't want users have the freedom to input anything into your components.\r\n\r\nReact has a solution for this and it's called PropTypes.\r\n\r\n```javascript\r\nvar MyTitle = React.createClass({\r\n  propTypes: {\r\n    title: React.PropTypes.string.isRequired,\r\n  },\r\n\r\n  render: function() {\r\n     return <h1> {this.props.title} </h1>;\r\n   }\r\n});\r\n```\r\n\r\nThe above component of `Mytitle` has a props of `title`. PropTypes tells React that the title is required and its value should be string.\r\n\r\nNow we give `Title` a number value.\r\n\r\n```javascript\r\nvar data = 123;\r\n\r\nReactDOM.render(\r\n  <MyTitle title={data} />,\r\n  document.body\r\n);\r\n```\r\n\r\nIt means the props doesn't pass the validation, and the console will show you a error message.\r\n\r\n```bash\r\nWarning: Failed propType: Invalid prop `title` of type `number` supplied to `MyTitle`, expected `string`.\r\n```\r\n\r\nVisit [official doc](http://facebook.github.io/react/docs/reusable-components.html) for more PropTypes options.\r\n\r\nP.S. If you want to give the props a default value, use `getDefaultProps()`.\r\n\r\n```javascript\r\nvar MyTitle = React.createClass({\r\n  getDefaultProps : function () {\r\n    return {\r\n      title : 'Hello World'\r\n    };\r\n  },\r\n\r\n  render: function() {\r\n     return <h1> {this.props.title} </h1>;\r\n   }\r\n});\r\n\r\nReactDOM.render(\r\n  <MyTitle />,\r\n  document.body\r\n);\r\n```\r\n\r\n## Demo07: Finding a DOM node ([source](https://github.com/ruanyf/react-demos/blob/master/demo07/index.html))\r\n\r\nSometimes you need to reference a DOM node in a component. React gives you the `ref` attribute to find it.\r\n\r\n```js\r\nvar MyComponent = React.createClass({\r\n  handleClick: function() {\r\n    this.refs.myTextInput.focus();\r\n  },\r\n  render: function() {\r\n    return (\r\n      <div>\r\n        <input type=\"text\" ref=\"myTextInput\" />\r\n        <input type=\"button\" value=\"Focus the text input\" onClick={this.handleClick} />\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <MyComponent />,\r\n  document.getElementById('example')\r\n);\r\n```\r\n\r\nThe desired DOM node should have a `ref` attribute, and `this.refs.[refName]` would return the corresponding DOM node. Please be minded that you could do that only after this component has been mounted into the DOM, otherwise you get `null`.\r\n\r\n## Demo08: this.state ([source](https://github.com/ruanyf/react-demos/blob/master/demo08/index.html))\r\n\r\nReact thinks of component as state machines, and uses `this.state` to hold component's state, `getInitialState()` to initialize `this.state`(invoked before a component is mounted), `this.setState()` to update `this.state` and re-render the component.\r\n\r\n```js\r\nvar LikeButton = React.createClass({\r\n  getInitialState: function() {\r\n    return {liked: false};\r\n  },\r\n  handleClick: function(event) {\r\n    this.setState({liked: !this.state.liked});\r\n  },\r\n  render: function() {\r\n    var text = this.state.liked ? 'like' : 'haven\\'t liked';\r\n    return (\r\n      <p onClick={this.handleClick}>\r\n        You {text} this. Click to toggle.\r\n      </p>\r\n    );\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <LikeButton />,\r\n  document.getElementById('example')\r\n);\r\n```\r\n\r\nYou could use component attributes to register event handlers, just like `onClick`, `onKeyDown`, `onCopy`, etc. Official Document has all [supported events](http://facebook.github.io/react/docs/events.html#supported-events).\r\n\r\n## Demo09: Form ([source](https://github.com/ruanyf/react-demos/blob/master/demo09/index.html))\r\n\r\nAccording to React's design philosophy, `this.state` describes the state of component and is mutated via user interactions, and `this.props` describes the properties of component and is stable and immutable.\r\n\r\nSince that, the `value` attribute of Form components, such as &lt;input&gt;, &lt;textarea&gt;, and &lt;option&gt;, is unaffected by any user input. If you wanted to access or update the value in response to user input, you could use the onChange event.\r\n\r\n```js\r\nvar Input = React.createClass({\r\n  getInitialState: function() {\r\n    return {value: 'Hello!'};\r\n  },\r\n  handleChange: function(event) {\r\n    this.setState({value: event.target.value});\r\n  },\r\n  render: function () {\r\n    var value = this.state.value;\r\n    return (\r\n      <div>\r\n        <input type=\"text\" value={value} onChange={this.handleChange} />\r\n        <p>{value}</p>\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nReactDOM.render(<Input/>, document.body);\r\n```\r\n\r\nMore information on [official document](http://facebook.github.io/react/docs/forms.html).\r\n\r\n## Demo10: Component Lifecycle ([source](https://github.com/ruanyf/react-demos/blob/master/demo10/index.html))\r\n\r\nComponents have three main parts of [their lifecycle](https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle): Mounting(being inserted into the DOM), Updating(being re-rendered) and Unmounting(being removed from the DOM). React provides hooks into these lifecycle part. `will` methods are called right before something happens, and `did` methods which are called right after something happens.\r\n\r\n```js\r\nvar Hello = React.createClass({\r\n  getInitialState: function () {\r\n    return {\r\n      opacity: 1.0\r\n    };\r\n  },\r\n\r\n  componentDidMount: function () {\r\n    this.timer = setInterval(function () {\r\n      var opacity = this.state.opacity;\r\n      opacity -= .05;\r\n      if (opacity < 0.1) {\r\n        opacity = 1.0;\r\n      }\r\n      this.setState({\r\n        opacity: opacity\r\n      });\r\n    }.bind(this), 100);\r\n  },\r\n\r\n  render: function () {\r\n    return (\r\n      <div style={{opacity: this.state.opacity}}>\r\n        Hello {this.props.name}\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <Hello name=\"world\"/>,\r\n  document.body\r\n);\r\n```\r\n\r\nThe following is [a whole list of lifecycle methods](http://facebook.github.io/react/docs/component-specs.html#lifecycle-methods).\r\n\r\n- componentWillMount()\r\n- componentDidMount()\r\n- componentWillUpdate(object nextProps, object nextState)\r\n- componentDidUpdate(object prevProps, object prevState)\r\n- componentWillUnmount()\r\n- componentWillReceiveProps(object nextProps): invoked when a mounted component receives new props.\r\n- shouldComponentUpdate(object nextProps, object nextState): invoked when a component decides whether any changes warrant an update to the DOM.\r\n\r\n## Demo11: Ajax ([source](https://github.com/ruanyf/react-demos/blob/master/demo11/index.html))\r\n\r\nHow to get the data of a component from a server or an API provider? The answer is using Ajax to fetch data in the event handler of `componentDidMount`. When the server response arrives, store the data with `this.setState()` to trigger a re-render of your UI.\r\n\r\n```js\r\nvar UserGist = React.createClass({\r\n  getInitialState: function() {\r\n    return {\r\n      username: '',\r\n      lastGistUrl: ''\r\n    };\r\n  },\r\n\r\n  componentDidMount: function() {\r\n    $.get(this.props.source, function(result) {\r\n      var lastGist = result[0];\r\n      if (this.isMounted()) {\r\n        this.setState({\r\n          username: lastGist.owner.login,\r\n          lastGistUrl: lastGist.html_url\r\n        });\r\n      }\r\n    }.bind(this));\r\n  },\r\n\r\n  render: function() {\r\n    return (\r\n      <div>\r\n        {this.state.username}'s last gist is\r\n        <a href={this.state.lastGistUrl}>here</a>.\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <UserGist source=\"https://api.github.com/users/octocat/gists\" />,\r\n  document.body\r\n);\r\n```\r\n\r\n## Demo12: Display value from a Promise ([source](https://github.com/ruanyf/react-demos/tree/master/demo12/index.html))\r\n\r\nThis demo is inspired by Nat Pryce's article [\"Higher Order React Components\"](http://natpryce.com/articles/000814.html).\r\n\r\nIf a React component's data is received asynchronously, we can use a Promise object as the component's property also, just as the following.\r\n\r\n```javascript\r\nReactDOM.render(\r\n  <RepoList\r\n    promise={$.getJSON('https://api.github.com/search/repositories?q=javascript&sort=stars')}\r\n  />,\r\n  document.body\r\n);\r\n```\r\n\r\nThe above code takes data from Github's API, and the `RepoList` component gets a Promise object as its property.\r\n\r\nNow, while the promise is pending, the component displays a loading indicator. When the promise is resolved successfully, the component displays a list of repository information. If the promise is rejected, the component displays an error message.\r\n\r\n```javascript\r\nvar RepoList = React.createClass({\r\n  getInitialState: function() {\r\n    return { loading: true, error: null, data: null};\r\n  },\r\n\r\n  componentDidMount() {\r\n    this.props.promise.then(\r\n      value => this.setState({loading: false, data: value}),\r\n      error => this.setState({loading: false, error: error}));\r\n  },\r\n\r\n  render: function() {\r\n    if (this.state.loading) {\r\n      return <span>Loading...</span>;\r\n    }\r\n    else if (this.state.error !== null) {\r\n      return <span>Error: {this.state.error.message}</span>;\r\n    }\r\n    else {\r\n      var repos = this.state.data.items;\r\n      var repoList = repos.map(function (repo) {\r\n        return (\r\n          <li>\r\n            <a href={repo.html_url}>{repo.name}</a> ({repo.stargazers_count} stars) <br/> {repo.description}\r\n          </li>\r\n        );\r\n      });\r\n      return (\r\n        <main>\r\n          <h1>Most Popular JavaScript Projects in Github</h1>\r\n          <ol>{repoList}</ol>\r\n        </main>\r\n      );\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Demo13: Server-side rendering ([source](https://github.com/ruanyf/react-demos/tree/master/demo13/src))\r\n\r\nThis demo is copied from [github.com/mhart/react-server-example](https://github.com/mhart/react-server-example), but I rewrote it with JSX syntax.\r\n\r\n```bash\r\n# install the dependencies in demo12 directory\r\n$ npm install\r\n\r\n# translate all jsx file in src subdirectory to js file\r\n$ npm run build\r\n\r\n# launch http server\r\n$ node server.js\r\n```\r\n\r\n## Extras\r\n\r\n### Precompiling JSX\r\n\r\nAll above demos don't use JSX compilation for clarity. In production environment, ensure to precompile JSX files before putting them online.\r\n\r\nFirst, install the command-line tools [Babel](https://babeljs.io/docs/usage/cli/).\r\n\r\n```bash\r\n$ npm install -g babel\r\n```\r\n\r\nThen precompile your JSX files(.jsx) into JavaScript(.js). Compiling the entire src directory and output it to the build directory, you may use the option `--out-dir` or `-d`.\r\n\r\n```bash\r\n$ babel src --out-dir build\r\n```\r\n\r\nPut the compiled JS files into HTML.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Hello React!</title>\r\n    <script src=\"build/react.js\"></script>\r\n    <script src=\"build/react-dom.js\"></script>\r\n    <!-- No need for Browser.js! -->\r\n  </head>\r\n  <body>\r\n    <div id=\"example\"></div>\r\n    <script src=\"build/helloworld.js\"></script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n## Useful links\r\n\r\n- [React's official site](http://facebook.github.io/react)\r\n- [React's official examples](https://github.com/facebook/react/tree/master/examples)\r\n- [React (Virtual) DOM Terminology](http://facebook.github.io/react/docs/glossary.html), by Sebastian Markbåge\r\n- [The React Quick Start Guide](http://www.jackcallister.com/2015/01/05/the-react-quick-start-guide.html), by Jack Callister\r\n- [Learning React.js: Getting Started and Concepts](https://scotch.io/tutorials/learning-react-getting-started-and-concepts), by Ken Wheeler\r\n- [Getting started with React](http://ryanclark.me/getting-started-with-react/), by Ryan Clark\r\n- [React JS Tutorial and Guide to the Gotchas](https://zapier.com/engineering/react-js-tutorial-guide-gotchas/), by Justin Deal\r\n- [React Primer](https://github.com/BinaryMuse/react-primer), by Binary Muse\r\n- [jQuery versus React.js thinking](http://blog.zigomir.com/react.js/jquery/2015/01/11/jquery-versus-react-thinking.html), by zigomir\r\n\r\n## License\r\n\r\nBSD licensed\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}